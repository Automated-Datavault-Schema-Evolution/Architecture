@startuml
' Define packages for clarity
package "Data Ingestion" {
  [Baseline Directory] <<Directory>>
  [Filewatcher] <<Component>>
  [Kafka Service] <<Component>>
}

package "Data Processing" {
  [Kafka Consumer / PySpark] <<Component>>
  [Datalake Handler] <<Component>>
}

package "Data Storage" {
  [Datalake] <<DataStore>>
  [Data Vault] <<Component>>
}

package "Presentation" {
  [Presentation Layer] <<Component>>
}

package "Framework" {
  [Schema Evolution Framework] <<Component>>
}

package "Data Vault" {
    [Raw Vault] <<Component>>
    [Business Vault] <<Component>>
}

' Show interactions between components
[Baseline Directory] --> [Filewatcher] : Monitors for CSV changes
[Filewatcher] --> [Kafka Service] : Sends file change events
[Kafka Service] --> [Kafka Consumer / PySpark] : Streams changed data
[Kafka Consumer / PySpark] --> [Datalake Handler] : Sends dataframe

note left of [Datalake Handler]
  Configuration Options:
  - Real-time streaming & updates
  - Batch-changes (using Kafka streaming)
end note

note left of [Datalake]
    Configuration Options:
    - Parquet Files
    - RDBMS (PostgresDB)
end note


[Datalake Handler] --> [Datalake] : Stores data based on config
[Datalake] --> [Data Vault] : Ingests data
[Data Vault] --> [Presentation Layer] : Provides star schema view (raw & business)

' Integration of Schema Evolution Framework
[Filewatcher] --> [Framework] : Notifies schema evolution
[Framework] --> [Datalake Handler] : Adapts data lake schema
[Framework] --> [Data Vault] : Adapts vault schema
[Framework] --> [Presentation Layer] : Updates presentation objects
@enduml
